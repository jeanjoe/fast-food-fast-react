// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test article component Matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SignUpForm
    allError={null}
    handleOnChange={[MockFunction]}
    handleSubmit={[MockFunction]}
    loading={true}
    passwordError="error"
    registerSuccess={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "as": "form",
      "children": Array [
        <Header
          textAlign="center"
        >
          Create your account.
        </Header>,
        <Alert
          message="error"
          type="negative"
        />,
        "",
        <FormField
          control={[Function]}
          label="First Name"
          name="firstName"
          onChange={[MockFunction]}
          placeholder="First Name"
          type="text"
        />,
        <FormField
          control={[Function]}
          label="Last Name"
          name="lastName"
          onChange={[MockFunction]}
          placeholder="Last Name"
          type="text"
        />,
        <FormField
          control={[Function]}
          label="Email"
          name="email"
          onChange={[MockFunction]}
          placeholder="Email"
          type="email"
        />,
        <FormField
          control={[Function]}
          label="Password"
          name="password"
          onChange={[MockFunction]}
          placeholder="********"
          type="password"
        />,
        <FormField
          control={[Function]}
          label="Confirm password"
          min={8}
          name="confirmPassword"
          onChange={[MockFunction]}
          placeholder="*******"
          type="password"
        />,
        <FormField
          checked={true}
          control={[Function]}
          disabled={true}
          label="I agree to the Terms and Conditions"
        />,
        <Button
          as="button"
          color="red"
          fluid={true}
          size="medium"
          type="submit"
        >
          <React.Fragment>
            <Icon
              as="i"
              loading={true}
              name="spinner"
            />
            Signing Up...
          </React.Fragment>
        </Button>,
      ],
      "onSubmit": [MockFunction],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Create your account.",
          "textAlign": "center",
        },
        "ref": null,
        "rendered": "Create your account.",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "message": "error",
          "type": "negative",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "control": [Function],
          "label": "First Name",
          "name": "firstName",
          "onChange": [MockFunction],
          "placeholder": "First Name",
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "control": [Function],
          "label": "Last Name",
          "name": "lastName",
          "onChange": [MockFunction],
          "placeholder": "Last Name",
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "control": [Function],
          "label": "Email",
          "name": "email",
          "onChange": [MockFunction],
          "placeholder": "Email",
          "type": "email",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "control": [Function],
          "label": "Password",
          "name": "password",
          "onChange": [MockFunction],
          "placeholder": "********",
          "type": "password",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "control": [Function],
          "label": "Confirm password",
          "min": 8,
          "name": "confirmPassword",
          "onChange": [MockFunction],
          "placeholder": "*******",
          "type": "password",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "checked": true,
          "control": [Function],
          "disabled": true,
          "label": "I agree to the Terms and Conditions",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "as": "button",
          "children": <React.Fragment>
            <Icon
              as="i"
              loading={true}
              name="spinner"
            />
            Signing Up...
          </React.Fragment>,
          "color": "red",
          "fluid": true,
          "size": "medium",
          "type": "submit",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Icon
                as="i"
                loading={true}
                name="spinner"
              />,
              "Signing Up...",
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "i",
                "loading": true,
                "name": "spinner",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "Signing Up...",
          ],
          "type": Symbol(react.fragment),
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "as": "form",
        "children": Array [
          <Header
            textAlign="center"
          >
            Create your account.
          </Header>,
          <Alert
            message="error"
            type="negative"
          />,
          "",
          <FormField
            control={[Function]}
            label="First Name"
            name="firstName"
            onChange={[MockFunction]}
            placeholder="First Name"
            type="text"
          />,
          <FormField
            control={[Function]}
            label="Last Name"
            name="lastName"
            onChange={[MockFunction]}
            placeholder="Last Name"
            type="text"
          />,
          <FormField
            control={[Function]}
            label="Email"
            name="email"
            onChange={[MockFunction]}
            placeholder="Email"
            type="email"
          />,
          <FormField
            control={[Function]}
            label="Password"
            name="password"
            onChange={[MockFunction]}
            placeholder="********"
            type="password"
          />,
          <FormField
            control={[Function]}
            label="Confirm password"
            min={8}
            name="confirmPassword"
            onChange={[MockFunction]}
            placeholder="*******"
            type="password"
          />,
          <FormField
            checked={true}
            control={[Function]}
            disabled={true}
            label="I agree to the Terms and Conditions"
          />,
          <Button
            as="button"
            color="red"
            fluid={true}
            size="medium"
            type="submit"
          >
            <React.Fragment>
              <Icon
                as="i"
                loading={true}
                name="spinner"
              />
              Signing Up...
            </React.Fragment>
          </Button>,
        ],
        "onSubmit": [MockFunction],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Create your account.",
            "textAlign": "center",
          },
          "ref": null,
          "rendered": "Create your account.",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "message": "error",
            "type": "negative",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "control": [Function],
            "label": "First Name",
            "name": "firstName",
            "onChange": [MockFunction],
            "placeholder": "First Name",
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "control": [Function],
            "label": "Last Name",
            "name": "lastName",
            "onChange": [MockFunction],
            "placeholder": "Last Name",
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "control": [Function],
            "label": "Email",
            "name": "email",
            "onChange": [MockFunction],
            "placeholder": "Email",
            "type": "email",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "control": [Function],
            "label": "Password",
            "name": "password",
            "onChange": [MockFunction],
            "placeholder": "********",
            "type": "password",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "control": [Function],
            "label": "Confirm password",
            "min": 8,
            "name": "confirmPassword",
            "onChange": [MockFunction],
            "placeholder": "*******",
            "type": "password",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "checked": true,
            "control": [Function],
            "disabled": true,
            "label": "I agree to the Terms and Conditions",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "as": "button",
            "children": <React.Fragment>
              <Icon
                as="i"
                loading={true}
                name="spinner"
              />
              Signing Up...
            </React.Fragment>,
            "color": "red",
            "fluid": true,
            "size": "medium",
            "type": "submit",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Icon
                  as="i"
                  loading={true}
                  name="spinner"
                />,
                "Signing Up...",
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "as": "i",
                  "loading": true,
                  "name": "spinner",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "Signing Up...",
            ],
            "type": Symbol(react.fragment),
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
